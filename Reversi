import tkinter as tk
from tkinter import Label, Scale, Button

window = tk.Tk()
canvas = tk.Canvas(window, width=480, height=600)
canvas.pack()
font = ("Arial", 14)
status = Label(canvas); status.place (x=300, y=70)
skip = Button(canvas, text= "Skip your turn", font=font); skip.place (x= 300,y= 10)
scorecard = Label(canvas, font=font, text= ("Score:"), background= "lightgrey"); scorecard.place (x= 10,y= 10)
redstand = Label(canvas, font=font, background="lightgrey"); redstand.place (x=10, y=40)
bluestand = Label(canvas, font=font, background= "lightgrey"); bluestand.place (x=10, y=70)
newgame = Button(canvas, text="New game", font=font); newgame.place(x=150, y= 10)
helpbutton= Button(canvas, text="Help", font=font); helpbutton.place(x=150, y=70)


player = -1
cell_size = 60

def switch_player(ea):
    global player
    player = -player
    tussenstand()

def on_click(event):
    # Convert the mouse click position to a square on the board
    row = event.x // cell_size
    col = (event.y - 120) // cell_size 
    move = (row, col)
    make_move(board, player, move)
    draw_board()

def make_move(board, player, move):
    # Validate the move
    if not is_legal_move(board, move, player):
        return

    # Update the board with the new piece
    board[move[0]][move[1]] = player
    
    # Flip any captured pieces
    flip_pieces(board, move, player)
    
    switch_player(None)
    draw_board()
    return True
    
def flip_pieces(board, move, player):
    row, col = move
    directions = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]

    for dx, dy in directions:
        x, y = row + dx, col + dy
        if not (0 <= x < 8 and 0 <= y < 8) or board[x][y] != -player:
            continue
        x, y = x + dx, y + dy
        while 0 <= x < 8 and 0 <= y < 8 and board[x][y] == -player:
            x, y = x + dx, y + dy
        if not (0 <= x < 8 and 0 <= y < 8) or board[x][y] != player:
            continue
        x, y = row + dx, col + dy
        while board[x][y] == -player:
            board[x][y] = player
            x, y = x + dx, y + dy

                
def is_legal_move(board, move, player):
    # Check that the move is within the bounds of the board
    if not (0 <= move[0] < len(board) and 0 <= move[1] < len(board[0])):
        return False

    # Check that the square is empty
    if board[move[0]][move[1]] != 0:
        return False

    # Check for any sandwiched pieces in each direction
    directions = [(0,1), (1,1), (1,0), (1,-1), (0,-1), (-1,-1), (-1,0), (-1,1)]
    for d in directions:
        x = move[0] + d[0]
        y = move[1] + d[1]
        if not (0 <= x < len(board) and 0 <= y < len(board[0])):
            continue
        if board[x][y] == -player:
            x, y = x + d[0], y + d[1]
            while 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] == -player:
                x, y = x + d[0], y + d[1]
            if 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] == player:
                return True

    return False
    


def draw_cell(row, col, player):
    x1 = row * cell_size
    y1 = col * cell_size + 120
    x2 = x1 + cell_size
    y2 = y1 + cell_size 
    color = "white"
    if player == 1:
        color = "Blue"
        canvas.create_rectangle(x1, y1, x2, y2, fill="White", outline="black")
        canvas.create_oval((x1, y1), (x2, y2), fill=color)
    elif player == -1:
        color = "Red"

    canvas.create_rectangle(x1, y1, x2, y2, fill="White", outline="black")
    if is_legal_move(board, (row, col), player): 
       canvas.create_rectangle(x1, y1, x2, y2, fill="#00FF00")
    canvas.create_oval(((x1, y1), (x2, y2)), fill=color)
    

board =[
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, -1, 0, 0, 0],
    [0, 0, 0, -1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
]
def tussenstand():
    #Calculates the score for both teams
    redcount = sum(x.count(-1) for x in board) 
    bluecount = sum(y.count(1) for y in board)
    redstand.configure(text=(f"Red: {redcount}"))
    bluestand.configure(text=(f"Blue: {bluecount}"))

    #Tells who's turn it is
    if player == 1:
        status.configure(background="lightgrey", text= "Blue to move",font=font)
    if player == -1:
        status.configure(background="lightgrey", text = "Red to move", font=font)
  
def draw_board():
    for row in range(len(board)):
        for col in range(len(board[0])):
            draw_cell(row, col, board[row][col])
            tussenstand()

draw_board()
skip.bind("<Button-1>", switch_player)
canvas.bind("<Button-1>", on_click)
window.mainloop()
