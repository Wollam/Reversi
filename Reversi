import tkinter as tk


window = tk.Tk()
canvas = tk.Canvas(window, width=500, height=500)
canvas.pack()

player = 1
cell_size = 60

def switch_player(player):
    return 1 if player == -1 else -1

def on_click(event):
    # Convert the mouse click position to a square on the board
    row = event.x // cell_size
    col = event.y // cell_size
    move = (row, col )
    make_move(board, player, move)
    draw_board()

def make_move(board, player, move):
    # Validate the move
    if not is_legal_move(board, move, player):
        print("Illegal move!")
        return

    # Update the board with the new piece
    board[move[0]][move[1]] = player
    print("check")
    # Flip any captured pieces
    flip_pieces(board, move, player)
    player = switch_player(player)

def flip_pieces(board, move, player):
    # Flip any sandwiched pieces in each direction
    directions = [(0,1), (1,1), (1,0), (1,-1), (0,-1), (-1,-1), (-1,0), (-1,1)]
    for d in directions:
        x = move[0] + d[0]
        y = move[1] + d[1]
        if not (0 <= x < len(board) and 0 <= y < len(board[0])):
            continue
        if board[x][y] == -player:
            x, y = x + d[0], y + d[1]
            while 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] == -player:
                x, y = x + d[0], y + d[1]
            if 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] == player:
                x = move[0] + d[0]
                y = move[1] + d[1]
                while board[x][y] == -player:
                    board[x][y]
    print("check")

def is_legal_move(board, move, player):
    # Check that the move is within the bounds of the board
    if not (0 <= move[0] < len(board) and 0 <= move[1] < len(board[0])):
        return False

    # Check that the square is empty
    if board[move[0]][move[1]] != 0:
        return False

    # Check for any sandwiched pieces in each direction
    directions = [(0,1), (1,1), (1,0), (1,-1), (0,-1), (-1,-1), (-1,0), (-1,1)]
    for d in directions:
        x = move[0] + d[0]
        y = move[1] + d[1]
        if not (0 <= x < len(board) and 0 <= y < len(board[0])):
            continue
        if board[x][y] == -player:
            x, y = x + d[0], y + d[1]
            while 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] == -player:
                x, y = x + d[0], y + d[1]
            if 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] == player:
                return True

    return False

def draw_cell(row, col, value):
    x1 = col * cell_size
    y1 = row * cell_size
    x2 = x1 + cell_size
    y2 = y1 + cell_size
    color = "White"
    if value == 1:
        color = "Red"
    elif value == -1:
        color = "Blue"

    
    canvas.create_rectangle(x1, y1, x2, y2, fill="White", outline="black")
    canvas.create_oval(((x1, y1), (x2, y2)), fill=color)

board =[
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, -1, 0, 0, 0],
    [0, 0, 0, -1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0]
]

def draw_board():
    for row in range(len(board)):
        for col in range(len(board[0])):
            draw_cell(row, col, board[row][col])

draw_board()

canvas.bind("<Button-1>", on_click)
window.mainloop()
