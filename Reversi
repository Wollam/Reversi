import tkinter as tk

window = tk.Tk()
canvas = tk.Canvas(window, width=480, height=600)
canvas.pack()

player = 1
cell_size = 60


def switch_player():
    global player
    player = -player
    

def on_click(event):
    # Convert the mouse click position to a square on the board
    col = event.x // cell_size
    row = event.y // cell_size 
    move = (col, row)
    print (move)
    make_move(board, player, move)
    draw_board()
    


def make_move(board, player, move):
    # Validate the move
    if not is_legal_move(board, move, player):
        print("Illegal move!")
        return

    # Update the board with the new piece
    board[move[0]][move[1]] = player
    
    # Flip any captured pieces
    for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
            if dx == 0 and dy == 0:
                continue
            flip_pieces(board, move, player, dx, dy)
    
    switch_player()
    draw_board()
    return True
    
    

def flip_pieces(board, move, player, dx, dy):
    x, y = move[0] + dx, move[1] + dy
    if 0 <= x < 8 and 0 <= y < 8 and board[x][y] == -player:
        # There is an opposing piece in this direction, so flip it and continue
        board[x][y] = player
        if flip_pieces(board, move, player, dx, dy):
            # Pieces were flipped in this direction, so flip the current piece
            board[move[0]][move[1]] = player
            return True
    elif 0 <= x < 8 and 0 <= y < 8 and board[x][y] == player:
        # We reached a friendly piece, so stop flipping
        return True
    else:
        # We reached the edge of the board or an empty square, so don't flip any pieces
        return False

                
    

def is_legal_move(board, move, player):
    # Check that the move is within the bounds of the board
    if not (0 <= move[0] < len(board) and 0 <= move[1] < len(board[0])):
        return False

    # Check that the square is empty
    if board[move[0]][move[1]] != 0:
        return False

    # Check for any sandwiched pieces in each direction
    directions = [(0,1), (1,1), (1,0), (1,-1), (0,-1), (-1,-1), (-1,0), (-1,1)]
    for d in directions:
        x = move[0] + d[0]
        y = move[1] + d[1]
        if not (0 <= x < len(board) and 0 <= y < len(board[0])):
            continue
        if board[x][y] == -player:
            x, y = x + d[0], y + d[1]
            while 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] == -player:
                x, y = x + d[0], y + d[1]
            if 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] == player:
                return True

    return False

def draw_cell(row, col, player):
    x1 = row * cell_size
    y1 = col * cell_size 
    x2 = x1 + cell_size
    y2 = y1 + cell_size 
    color = "white"
    if player == 1:
        color = "red"
        canvas.create_rectangle(x1, y1, x2, y2, fill="White", outline="black")
        canvas.create_oval((x1, y1), (x2, y2), fill=color)
    elif player == -1:
        color = "Blue"
        canvas.create_rectangle(x1, y1, x2, y2, fill="White", outline="black")
        canvas.create_oval((x1, y1), (x2, y2), fill=color)
    elif is_legal_move(board, (row, col), player):
        canvas.create_oval((x1, y1), (x2, y2), fill="green")
        canvas.create_rectangle(x1, y1, x2, y2, outline="black")
    else:
        canvas.create_rectangle(x1, y1, x2, y2, fill=color, outline="black")
    
    

board =[
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, -1, 0, 0, 0],
    [0, 0, 0, -1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0]
]

def draw_board():
    for row in range(len(board)):
        for col in range(len(board[0])):
            draw_cell(row, col, board[row][col])

draw_board()

canvas.bind("<Button-1>", on_click)

window.mainloop()
