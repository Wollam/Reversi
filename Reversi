board_size = 400
num_squares = 10
cell_size = board_size // num_squares
board = [[0] * num_squares for _ in range(num_squares)]
middle = num_squares // 2
board[middle][middle] = 1
board[middle-1][middle-1] = 1
board[middle][middle-1] = -1
board[middle-1][middle] = -1


def draw_cell(row, col, value):
    """Draw a cell at the given board position."""
    square_size = board_size // num_squares
    x1, y1 = row * square_size, col * square_size + 120
    x2, y2 = x1 + square_size, y1 + square_size 
    color = "white"
    if value == 1:
        color = "Blue"
    elif value == -1:
        color = "Red"
    canvas.create_rectangle(x1, y1, x2, y2, fill="White", outline="black")
    if is_legal_move(board, (row, col), player) and helpstand: 
       canvas.create_rectangle(x1, y1, x2, y2, fill="green")
    canvas.create_oval(((x1, y1), (x2, y2)), fill=color)

def flip_pieces(board, move, player):
    row, col = move
    directions = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]

    for dx, dy in directions:
        x, y = row + dx, col + dy
        if not (0 <= x < num_squares and 0 <= y < num_squares) or board[x][y] != -player:
            continue
        x, y = x + dx, y + dy
        while 0 <= x < num_squares and 0 <= y < num_squares and board[x][y] == -player:
            x, y = x + dx, y + dy
        if not (0 <= x < num_squares and 0 <= y < num_squares) or board[x][y] != player:
            continue
        x, y = row + dx, col + dy
        while board[x][y] == -player:
            board[x][y] = player
            x, y = x + dx, y + dy
